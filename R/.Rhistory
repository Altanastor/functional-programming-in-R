Reduce(`+`, 1:5)
?Reduce
Reduce(`+`, 1:5, accumulate = TRUE)
Reduce(`+`, 1:5, right = TRUE, accumulate = TRUE)
Reduce(`*`, 1:5)
Reduce(`*`, 1:5)
Reduce(`*`, 1:5, accumulate = TRUE)
Reduce(`*`, 1:5, right = TRUE, accumulate = TRUE)
Reduce(`+`, 1:5, init = 10)
Reduce(`+`, 1:5, init = 10, accumulate = TRUE)
Reduce(c, 1:5)
Reduce(c, 1:5, right = TRUE)
Reduce(`*`, 1:5, accumulate = TRUE)
Reduce(`*`, 1:5, right = TRUE, accumulate = TRUE)
source('~/.active-rstudio-document', echo=TRUE)
unlist(Map(node_depth_B, Filter(has_B, trees)))
source('~/.active-rstudio-document', echo=TRUE)
unlist(Map(node_depth_B, Filter(has_B, trees)), use.names = FALSE)
replicate(sample(1:10, replace = TRUE), simplify = FALSE)
replicate(5, sample(1:10, replace = TRUE), simplify = FALSE)
samples <- replicate(5, sample(1:10, replace = TRUE), simplify = FALSE)
str(samples)
samples <- replicate(5, sample(1:10, replace = TRUE, n = 5), simplify = FALSE)
samples <- replicate(5, sample(5, 1:10, replace = TRUE), simplify = FALSE)
str(samples)
?sample
samples <- replicate(5, sample(1:10, size = 5, replace = TRUE), simplify = FALSE)
str(samples)
Reduce(intersect, samples)
samples <- replicate(5, sample(1:10, size = 5, replace = TRUE), simplify = FALSE)
str(samples)
Reduce(intersect, samples)
samples <- replicate(3, sample(1:10, size = 5, replace = TRUE), simplify = FALSE)
str(samples)
Reduce(intersect, samples)
samples <- replicate(3, sample(1:10, size = 6, replace = TRUE), simplify = FALSE)
str(samples)
Reduce(intersect, samples)
samples <- replicate(3, sample(1:10, replace = TRUE), simplify = FALSE)
str(samples)
Reduce(intersect, samples)
Reduce(`+`, 1:5, accumulate = TRUE)
?prod
Map
?apply
?lapply
?apply
?vapply
?tapply
x <- repliate(sample(1:5, size=10), simplify = FALSE)
x <- replicate(sample(1:5, size=10), simplify = FALSE)
x <- replicate(sample(1:5, size = 10, replace = TRUE), simplify = FALSE)
x <- replicate(5, sample(1:5, size = 10, replace = TRUE), simplify = FALSE)
x
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
(x <- rnorm(10))
(categories <- sample(c("A", "B", "C"), size = 10, replace = TRUE))
tapply(x, categories, mean)
(categories2 <- sample(c("X", "Y"), size = 10, replace = TRUE))
tapply(x, categories, categories2, mean)
tapply(x, list(categories, categories2), mean)
keep(rcurry(`>`)(3), 1:5)
library(purrr)
keep(rcurry(`>`)(3), 1:5)
rcurry2 <- function(f) function(y) function(x) f(x, y)
library(purrr)
keep(rcurry(`>`)(3), 1:5)
keep(rcurry2(`>`)(3), 1:5)
keep(1:5, rcurry2(`>`)(3))
discard(1:5, rcurry2(`>`)(3))
every(1:5, rcurry2(`>`)(0))
some(1:5, rcurry2(`>`)(3))
every(1:5, rcurry2(`>`)(3))
some(1:5, rcurry2(`>`)(6))
keep(1:5, ~ .x > 3)
keep(1:5, ~ .x > 3)
discard(1:5, ~ .x > 3)
split_by(x, categories)
(x <- rnorm(10))
(categories <- sample(c("A", "B", "C"), size = 10, replace = TRUE))
split_by(x, categories)
split(x, categories)
keep(as.list(1:5), ~ .x > 3)
keep(as.list(1:5), rcurry2(`>`)(3))
pmap(1:5, 1:5, ~ .x + .y)
pmap(1:5, 1:5, ~ .x + 2)
?pmap
map2(1:5, 1:5, ~ .x + 2)
map2(1:5, 1:5, ~ .x + .y)
pmap(list(1:5, 1:5), ~ .x + .y)
pmap(list(1:5, 1:5, 1:5), ~ .x + .y)
pmap(list(1:5, 1:5, 1:5), ~ .x + .y + .z)
pmap(list(1:5, 1:5, 1:5), ~ . + .y + .z)
pmap(list(1:5, 1:5, 1:5), ~ . + .y)
pmap(list(1:5, 6:10, 1:5), ~ . + .y)
pmap(list(1:5, 6:10, 1:5), ~ .x + .y)
map(1:5, ~ .x + 2)
map_dbl(1:5, ~ .x + 2)
map2(1:5, 6:10, ~ .x + 2)
map2_dbl(1:5, 6:10, ~ .x + 2)
map2(1:5, 6:10, ~ .x + .y)
map2_dbl(1:5, 6:10, ~ .x + .y)
map2(1:5, 6:10, ~ 2 * .x + .y)
map2_dbl(1:5, 6:10, ~ 2 * .x + .y)
pmap(list(1:5, 6:10, 11:15), function(x, y, z) x + y + z)
pmap_dbl(list(1:5, 6:10, 11:15), function(x, y, z) x + y + z)
reduce(1:5, `+z)
reduce(1:5, `+`)
)
)
`
`
`
reduce(1:5, `+`)
?reduce
map(trees, "left")
map(print_tree, map(trees, "left"))
map(map(trees, "left"), print_tree)
map_chr(map(trees, "left"), print_tree)
?map_if
map_chr(map_if(trees, ~ size_of_tree(.x) > 1, "left"), print_tree)
trees
map_chr(map_if(trees, ~ size_of_tree(.x) > 1, "left"), print_tree)
map_if(trees, ~ size_of_tree(.x) > 1, print_tree)
map_if(1:5, ~ .x %% 2 == 1, ~ 2*.x)
unlist(map_if(1:5, ~ .x %% 2 == 1, ~ 2*.x))
map_chr(map(keep(trees, ~ size_of_tree(.x) > 1, "left"),
print_tree))
map_chr(map(keep(trees, ~ size_of_tree(.x) > 1, "left")),
print_tree)
map_chr(map(keep(trees, ~ size_of_tree(.x) > 1), "left"),
print_tree)
source('~/.active-rstudio-document', echo=TRUE)
rcurry2 <- function(f) function(y) function(x) f(x, y)
curry2 <- function(f) function(x) function(y) f(x, y)
source('~/.active-rstudio-document', echo=TRUE)
library(purrr)
umap(~ .x + 2, 1:4)
umap <- g %.% f
library(pryr)
umap <- g %.% f
umap <- unlist %.% Map
umap(curry2(`+`)(2), 1:4)
rmse <- sqrt %.% mean %.% function(x, y) (x - y)**2
rmse(1:4, 2:6)
rmse(1:4, 2:5)
`%;%` <- function(f, g) function(...) g(f(...))
rmse <- function(x, y) (x - y)**2 %;% mean %;% sqrt
rmse(1:4, 2:5)
rmse <- (function(x, y) (x - y)**2) %;% mean %;% sqrt
rmse(1:4, 2:5)
library(magrittr)
1:4 %>% mean %>% sqrt
data.frame(x = 1:4, y = 2:5) %>% plot(y ~ x, data = .)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
rmse <- . %>% { (.$x - .$y)**2 } %>% mean %>% sqrt
data.frame(x = 1:4, y = 2:5) %>% rmse
source('~/.active-rstudio-document', echo=TRUE)
datf
foo()
?ls
foo <- function() ls()
bar <- function() ls(envir = parent.frame())
baz <- function() ls(envir = .GlobalEnv)
foo() ; bar() ; baz()
foo <- function() ls()
foo()
bar <- function() ls(envir = parent.frame())
bar()
baz <- function() ls(envir = .GlobalEnv)
baz()
bar <- function(x) ls(envir = parent.frame())
bar(1)
bar <- function(x) ls()
bar(1)
foo <- function(){
selected_names <- sapply(ls(.GlobalEnv),
function(x) class(get(x))) %in% c("data.frame","list")
df.list <- ls(.GlobalEnv)[selected_names]
dat.str <- select.list(choices=df.list, title="Select object")
dat <- get(dat.str)
str(dat)
}
vec <- 1:10
mylist <- list(1:3)
datf <- data.frame(var1=rnorm(10), var2=rnorm(10))
foo()
class(4)
class(4L)
4L/3L
dataS = data.frame(V1 = sample(c(1,2,3,4),30,replace = T),
V2 = sample(c(1,2,3,4),30,replace = T),
V3 = sample(c(1,2,3,4),30,replace = T),
V4 = sample(c(1,2,3,4),30,replace = T))
saxM = Func.matrix(5)
colnames(saxM) = 1:5
rownames(saxM) = 1:5
matrixPrepared = matrix(NA, nrow = nrow(dataS), ncol = nrow(dataS))
for (i in 1:(NROW(DATAS)-1)){
FOR(J IN (1+I):NROW(DATAS)){
MATRIXPREPARED[I,J] = FUNC.DIST(AS.CHARACTER(DATAS[I,]),
AS.CHARACTER(DATAS[J,]), SAXM, N=60)
}
}
matrixPrepared
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("stringdist")
library(stringdist)
stringdist()
for (i in 1:(nrow(dataS)-1)){
for (j IN (1+i):nrow(dataS)){
matrixPrepared[I,J] = stringdist(as.character(dataS[i,]),
as.character(dataS[j,]))
}
}
for (i in 1:(nrow(dataS)-1)){
for (j in (1+i):nrow(dataS)){
matrixPrepared[i, j] = stringdist(as.character(dataS[i,]),
as.character(dataS[j,]))
}
}
x <- as.character(dataS[1,])
x
for (i in 1:(nrow(dataS)-1)){
for (j in (1+i):nrow(dataS)){
matrixPrepared[i, j] = stringdist(paste0(as.character(dataS[i,])),
paste0(as.character(dataS[j,])))
}
}
i <- 1 ; j <- 2
stringdist(paste0(as.character(dataS[i,])),
paste0(as.character(dataS[j,])))
paste0(as.character(dataS[i,]))
paste0(as.character(dataS[i,]), col="")
paste0(as.character(dataS[i,]), sep="")
paste0(as.character(dataS[i,]), collapse = "")
for (i in 1:(nrow(dataS)-1)){
for (j in (1+i):nrow(dataS)){
matrixPrepared[i, j] = stringdist(paste0(as.character(dataS[i,]), collapse=""),
paste0(as.character(dataS[j,]), collapse=""))
}
}
paste0(as.character(dataS[i,]), collapse = "")
outer(1:3, 1:3)
outer(1:3, 1:3, c)
?outer
outer(1:3, 1:3, identity)
1:3 %o% 1:3
source('~/.active-rstudio-document', echo=TRUE)
x <- for_loop_test()
y <- apply_test()
source('~/.active-rstudio-document', echo=TRUE)
apply_test <- function() {
get_dist <- function(i, j) { return(c(i,j))
ifelse(i <= j, NA, stringdist(paste0(as.character(dataS[i,]), collapse=""),
paste0(as.character(dataS[j,]), collapse=""))
}
outer(1:nrow(dataS), 1:nrow(dataS), get_dist)
}
x <- for_loop_test()
y <- apply_test()
apply_test <- function() {
get_dist <- function(i, j) {
ifelse(i <= j, NA, stringdist(paste0(as.character(dataS[i,]), collapse=""),
paste0(as.character(dataS[j,]), collapse=""))
}
outer(1:nrow(dataS), 1:nrow(dataS), get_dist)
}
x <- for_loop_test()
y <- apply_test()
outer(1:3,1:2, c)
outer(1:3,1:2, identity)
outer(1:3,1:2, function(x,y) x)
outer(1:3,1:2, function(x,y) y)
source('~/.active-rstudio-document', echo=TRUE)
apply_test <- function() {
get_dist <- function(i, j) {
if (i <= j) NA
else stringdist(paste0(as.character(dataS[i,]), collapse=""),
paste0(as.character(dataS[j,]), collapse=""))
}
get_dist <- Vectorize(get_dist)
outer(1:nrow(dataS), 1:nrow(dataS), get_dist)
}
x <- for_loop_test()
y <- apply_test()
x == y
x
y
source('~/.active-rstudio-document', echo=TRUE)
x == y
x
source('~/.active-rstudio-document', echo=TRUE)
x == y
expect_equal(x == y)
library(microbenchmark)
?microbenchmark
microbenchmark(for_loop_test(), apply_test(), check = identical)
microbenchmark(for_loop_test(), apply_test(), check = )
check <- function(values) any(values[1] != values[2])
check <- function(values) any(values[1] != values[2])
microbenchmark(for_loop_test(), apply_test(), check = check, times = 5)
check <- function(values) any(values[[1]] != values[[2]])
microbenchmark(for_loop_test(), apply_test(), check = check, times = 5)
x <- for_loop_test()
y <- apply_test()
x[1,1]
x[1,2]
y[1,2]
y[2,1]
source('~/.active-rstudio-document', echo=TRUE)
x <- for_loop_test()
y <- apply_test()
x[1,2]
y[1,2]
y[1,3]
x[1,3]
as.vector(x) == as.vector(y)
any(!(as.vector(x) == as.vector(y)))
any(!(as.vector(x) == as.vector(y)))
?equivalent
equal
library(testthat)
expect_equal(x, y)
expect_equal(x, t(y))
equals()
equals(x, y)
equals(x)
equals(x)(y)
equals(x)(t(y))
equivalent <- function(x, y) (is.na(x) && is.na(y)) || (x == y)
check <- function(values) all(equivalent(values[[1]], values[[2]]))
microbenchmark(for_loop_test(), apply_test(), check = check, times = 5)
install.packages("mlbench")
install.packages("mvtnorm")
install.packages("modeltools")
install.packages("zoo")
install.packages("sandwich")
install.packages("strucchange")
library(mlbench)
install.packages("party")
install.packages("randomForest")
install.packages("kernlab")
install.packages("e1071")
install.packages("readr")
install.packages("gridExtra")
install.packages("gridBase")
install.packages("cowplot")
install.packages("hexbin")
install.packages("biglm")
install.packages("ff")
install.packages("ffbase")
install.packages("ggdendro")
install.packages("arules")
?str
str(1:10)
source('~/.active-rstudio-document', echo=TRUE)
options(width = 50,
str = strOptions(vec.len = 1,
strict.width = "cut"))
str(1:10)
options(width = 50,
str = strOptions(vec.len = 3,
strict.width = "cut"))
str(1:10)
install.packages("RSQLite")
data(iris)
iris$Species %>% unique()
install.packages("tibble")
library(tibble)
?tibble
~~ rnorm(4) %>% data.frame(x = sin(.), y = cos(.))
rnorm(4) %>% data.frame(x = sin(.), y = cos(.))
install.packages("admixturegraph")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
